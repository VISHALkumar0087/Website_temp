#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void deleteAtPosition(Node** head_ref, int position) {
    if (*head_ref == nullptr)
        return;
    Node* temp = *head_ref;

    if (position == 0) {
        *head_ref = temp->next;
        delete temp;
        return;
    }

    for (int i = 0; temp != nullptr && i < position - 1; i++)
        temp = temp->next;

    if (temp == nullptr || temp->next == nullptr)
        return;

    Node* next = temp->next->next;
    delete temp->next;
    temp->next = next;
}

void insertAtEnd(Node** head_ref, int new_data) {
    Node* new_node = new Node;
    new_node->data = new_data;
    new_node->next = nullptr;
    if (*head_ref == nullptr) {
        *head_ref = new_node;
        return;
    }
    Node* last = *head_ref;
    while (last->next != nullptr)
        last = last->next;
    last->next = new_node;
}

void printList(Node* node) {
    while (node != nullptr) {
        cout << node->data << " ";
        node = node->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);
    insertAtEnd(&head, 40);
    insertAtEnd(&head, 50);
    
    cout << "Original list: ";
    printList(head);
    
    deleteAtPosition(&head, 2);  // Deletes element at position 2 (30)
    cout << "After deleting position 2: ";
    printList(head);
    
    deleteAtPosition(&head, 0);  // Deletes head (10)
    cout << "After deleting position 0: ";
    printList(head);

    return 0;
}
